generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique @db.VarChar(255)
  password    String       @db.VarChar(255)
  name        String       @db.VarChar(100)
  phoneNumber String?      @db.VarChar(20)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  addresses   Address[]
  carts       Cart[]
  orders      Order[]
  reviews     Review[]
  userCoupons UserCoupon[]
  wishlists   Wishlist[]
  qnas        ProductQnA[]
}

model Address {
  id             Int     @id @default(autoincrement())
  userId         Int
  recipientName  String  @db.VarChar(100)
  recipientPhone String  @db.VarChar(20)
  addressLine1   String  @db.VarChar(255)
  addressLine2   String? @db.VarChar(255)
  postCode       String  @db.VarChar(10)
  isDefault      Boolean
  user           User    @relation(fields: [userId], references: [id])
  order          Order[]
}

model Brand {
  id           Int       @id @default(autoincrement())
  name         String    @unique @db.VarChar(100)
  logoImageUrl String?   @db.VarChar(255)
  products     Product[]
}

model Product {
  id                Int         @id @default(autoincrement())
  name              String      @db.VarChar(255)
  productCode       String      @unique @db.VarChar(50)
  brandId           Int
  price             Int
  stockQuantity     Int
  thumbnailImageUrl String?     @db.VarChar(255)
  detailImageUrl    String?     @db.VarChar(255)
  detailDescription String
  isSample          Boolean     @default(false)
  samplePrice       Int?
  categoryId        Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isPick            Boolean     @default(false)
  carts             Cart[]
  orderItems        OrderItem[]
  brand             Brand       @relation(fields: [brandId], references: [id])
  category          Category    @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  wishlists         Wishlist[]
  qnas              ProductQnA[]
}

model ProductQnA {
  id           Int       @id @default(autoincrement())
  productId    Int
  userId       Int
  question     String    @db.VarChar(1000)
  answer       String?   @db.VarChar(1000) // 답변 없으면 NULL
  status       String    @default("PENDING") // PENDING, ANSWERED
  isPublic     Boolean   @default(true)     // 비공개 여부
  createdAt    DateTime  @default(now())
  answeredAt   DateTime? // 답변 작성일
  
  product      Product   @relation(fields: [productId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  slug        String    @unique @db.VarChar(50)
  description String?
  isActive    Boolean   @default(true)
  products    Product[]
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id                Int         @id @default(autoincrement())
  orderNumber       String      @unique @db.VarChar(50)
  userId            Int
  shippingAddressId Int
  couponId          Int?
  totalAmount       Int
  shippingFee       Int
  paymentStatus     String      @db.VarChar(50)
  paymentMethod     String      @db.VarChar(50)
  deliveryMessage   String?
  isSample          Boolean     @default(false)
  orderedAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  coupon            Coupon?     @relation(fields: [couponId], references: [id])
  address           Address     @relation(fields: [shippingAddressId], references: [id])
  user              User        @relation(fields: [userId], references: [id])
  orderItems        OrderItem[]
  usedCouponInfo    UserCoupon? @relation("OrderToUserCoupon")
}

model Coupon {
  id                     Int          @id @default(autoincrement())
  code                   String       @unique @db.VarChar(50)
  name                   String       @db.VarChar(100)
  discountType           String       @db.VarChar(20)
  discountValue          Int
  minOrderAmount         Int?
  validFrom              DateTime
  validUntil             DateTime
  isActive               Boolean
  usageLimit             Int?
  issuedBySamplePurchase Boolean
  orders                 Order[]
  userCoupons            UserCoupon[]
}

model OrderItem {
  id              Int     @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  priceAtPurchase Int
  order           Order   @relation(fields: [orderId], references: [id])
  product         Product @relation(fields: [productId], references: [id])
  review          Review[]

}

model UserCoupon {
  id          Int       @id @default(autoincrement())
  userId      Int
  couponId    Int
  isUsed      Boolean
  usedAt      DateTime?
  orderId     Int?      @unique
  coupon      Coupon    @relation(fields: [couponId], references: [id])
  usedByOrder Order?    @relation("OrderToUserCoupon", fields: [orderId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, couponId])
}

model Review {
  id          Int         @id @default(autoincrement())
  productId   Int
  userId      Int
  rating      Int
  reviewText  String
  imageUrl    String?     @db.VarChar(255)
  likesCount  Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItemId Int         
  isDeleted   Boolean     @default(false)
  orderItem   OrderItem   @relation(fields: [orderItemId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  reviewTags  ReviewTag[]
}

model ReviewTag {
  id         Int    @id @default(autoincrement())
  reviewId   Int
  tagKeyword String @db.VarChar(100)
  review     Review @relation(fields: [reviewId], references: [id])

  @@unique([reviewId, tagKeyword])
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}
